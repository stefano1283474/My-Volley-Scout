rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Regole per le collection email-based - ogni utente pu√≤ accedere solo alla propria collection
    match /{email}/{document=**} {
      allow read, write: if request.auth != null && 
                          (email == request.auth.token.email || 
                           email == request.auth.token.email.replace('.', '_'));
    }
    
    // Regole per la collection users - accesso per UID
    match /users/{userId} {
      allow read, write: if request.auth != null && 
                          (request.auth.uid == userId || 
                           request.auth.token.email == userId ||
                           request.auth.token.email.replace('.', '_') == userId);
    }
    
    // Regole per le partite - accesso per email o UID
    match /matches/{matchId} {
      allow read, write: if request.auth != null && 
                          (resource.data.userId == request.auth.token.email || 
                           resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           resource.data.userId == request.auth.uid ||
                           request.resource.data.userId == request.auth.token.email ||
                           request.resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           request.resource.data.userId == request.auth.uid);
    }
    
    // Regole per i roster - accesso per email o UID
    match /rosters/{rosterId} {
      allow read, write: if request.auth != null && 
                          (resource.data.userId == request.auth.token.email || 
                           resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           resource.data.userId == request.auth.uid ||
                           request.resource.data.userId == request.auth.token.email ||
                           request.resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           request.resource.data.userId == request.auth.uid);
    }
    
    // Regole per le azioni di gioco - accesso per email o UID
    match /match_actions/{actionId} {
      allow read, write: if request.auth != null && 
                          (resource.data.userId == request.auth.token.email || 
                           resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           resource.data.userId == request.auth.uid ||
                           request.resource.data.userId == request.auth.token.email ||
                           request.resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           request.resource.data.userId == request.auth.uid);
    }
    
    // Regole per le statistiche - accesso per email o UID
    match /match_stats/{statId} {
      allow read, write: if request.auth != null && 
                          (resource.data.userId == request.auth.token.email || 
                           resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           resource.data.userId == request.auth.uid ||
                           request.resource.data.userId == request.auth.token.email ||
                           request.resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           request.resource.data.userId == request.auth.uid);
    }
    
    // Regole per i backup - accesso per email o UID
    match /backups/{backupId} {
      allow read, write: if request.auth != null && 
                          (resource.data.userId == request.auth.token.email || 
                           resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           resource.data.userId == request.auth.uid ||
                           request.resource.data.userId == request.auth.token.email ||
                           request.resource.data.userId == request.auth.token.email.replace('.', '_') ||
                           request.resource.data.userId == request.auth.uid);
    }
  }
}